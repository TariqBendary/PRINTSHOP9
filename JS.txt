document.getElementById('langBtn').addEventListener('click', () => {
  const html = document.documentElement;
  const isArabic = html.lang === 'ar';

  html.lang = isArabic ? 'en' : 'ar';
  html.dir = isArabic ? 'ltr' : 'rtl';

  document.querySelectorAll('[data-lang-ar]').forEach(el => {
    el.textContent = isArabic ? el.dataset.langEn : el.dataset.langAr;
  });

  document.querySelectorAll('[data-placeholder-ar]').forEach(el => {
    el.placeholder = isArabic ? el.dataset.placeholderEn : el.dataset.placeholderAr;
  });
});

document.getElementById('paperType').addEventListener('change', function () {
  const customInput = document.getElementById('customPaper');
  customInput.style.display = this.value === 'custom' ? 'block' : 'none';
});

document.getElementById('unsubscribeBtn').addEventListener('click', () => {
  if (confirm('ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿ∑ŸÑÿ®ÿü')) window.close();
});

// ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿ•ÿ∂ÿßŸÅŸäÿ©
document.querySelectorAll('input[name="extraNote"]').forEach(el => {
  el.addEventListener('change', function () {
    const container = document.getElementById('extraNotesTextareaContainer');
    const notesField = document.getElementById('notes');

    if (this.value === 'ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿ£ÿÆÿ±Ÿâ') {
      container.style.display = 'block';
      notesField.value = '';
    } else {
      container.style.display = 'none';
      notesField.value = this.value;
    }
  });
});

document.getElementById('sendBtn').addEventListener('click', async () => {
  const printType = document.querySelector('input[name="printType"]:checked')?.value || '';
  const copies = document.getElementById('copies').value;
  const pages = document.getElementById('pages').value;
  const delivery = document.getElementById('delivery').value;

  const selectedNote = document.querySelector('input[name="extraNote"]:checked');
  let notes = selectedNote ? selectedNote.value : '';

  if (notes === 'ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿ£ÿÆÿ±Ÿâ') {
    notes = document.getElementById('notes').value;
  }

  const paperType = document.getElementById('paperType').value === 'custom'
    ? document.getElementById('customPaper').value
    : document.getElementById('paperType').value;

  const printPrice = document.getElementById('printPriceBox').textContent;
  const deliveryPrice = document.getElementById('deliveryPriceBox').textContent;
  const total = document.getElementById('totalPriceBox').textContent;

  const address = document.getElementById('delivery').value.trim();
  let distance = null;
  let fee = 0;

  if (address) {
    distance = await getDistanceFromAddress(address);
    if (distance !== null) {
      fee = calculateDeliveryFee(distance);
    }
  }

  const now = new Date();
  const dateString = `${now.getFullYear()}/${String(now.getMonth() + 1).padStart(2, "0")}/${String(now.getDate()).padStart(2, "0")}`;
  const timeString = `${String(now.getHours()).padStart(2, "0")}:${String(now.getMinutes()).padStart(2, "0")}`;

  const orderNumber = Math.floor(Math.random() * 900000) + 100000;

  let message = `üñ®Ô∏è ÿ®ÿ±ŸÜÿ™ ÿ¥Ÿàÿ® - ÿ∑ŸÑÿ® ÿ∑ÿ®ÿßÿπÿ©\n\n`;
  message += `üìÖ ŸàŸÇÿ™ ÿßŸÑÿ∑ŸÑÿ®: ${dateString} ${timeString}\n`;
  message += `üî¢ ÿ±ŸÇŸÖ ÿßŸÑÿ∑ŸÑÿ®: #${orderNumber}\n\n`;
  message += `üìù ŸÜŸàÿπ ÿßŸÑÿ∑ÿ®ÿßÿπÿ©: ${printType}\n`;
  message += `üìÑ ÿπÿØÿØ ÿßŸÑŸÜÿ≥ÿÆ: ${copies}\n`;
  message += `üìÑ ÿπÿØÿØ ÿßŸÑÿ£Ÿàÿ±ÿßŸÇ: ${pages}\n`;
  message += `üóíÔ∏è ŸÜŸàÿπ ÿßŸÑŸàÿ±ŸÇ: ${paperType}\n`;
  message += `üìç ÿπŸÜŸàÿßŸÜ ÿßŸÑÿ™ŸàÿµŸäŸÑ: ${delivery}\n`;

  if (distance !== null) {
    message += `üöó ÿßŸÑŸÖÿ≥ÿßŸÅÿ© ÿ•ŸÑŸâ ÿßŸÑÿπŸÜŸàÿßŸÜ: ${distance.toFixed(1)} ŸÉŸÖ\n`;
    message += `üí∞ ÿ±ÿ≥ŸàŸÖ ÿßŸÑÿ™ŸàÿµŸäŸÑ: ${fee.toFixed(3)} ÿØ.ŸÉ\n`;
  }

  if (notes) message += `üóÇÔ∏è ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™: ${notes}\n\n`;

  message += `üí∏ ÿ≥ÿπÿ± ÿßŸÑÿ∑ÿ®ÿßÿπÿ©: ${printPrice}\n`;
  message += `üí∏ ÿ≥ÿπÿ± ÿßŸÑÿ™ŸàÿµŸäŸÑ: ${deliveryPrice}\n`;
  message += `üíµ ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä: ${total}`;

  const whatsappUrl = `https://wa.me/96590010901?text=${encodeURIComponent(message)}`;
  window.open(whatsappUrl, '_blank');

  generateQRCode(whatsappUrl);
  showQRCodeSection();

  showPopup();
});

function showPopup() {
  const popup = document.getElementById('popup');
  popup.style.display = 'flex';
}

document.getElementById('popupClose').addEventListener('click', () => {
  document.getElementById('popup').style.display = 'none';
});

function calculatePrintPrice(printType, copies, pages) {
  let rate = printType === "ŸÖŸÑŸàŸÜ" ? 50 : 25;
  return (copies * pages * rate) / 1000;
}

const origin = { lat: 29.308770, lon: 47.940330 };

async function getDistanceFromAddress(address) {
  const res = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);
  const data = await res.json();

  if (!data.length) return null;

  const dest = {
    lat: parseFloat(data[0].lat),
    lon: parseFloat(data[0].lon)
  };

  return haversineDistance(origin.lat, origin.lon, dest.lat, dest.lon);
}

function deg2rad(deg) {
  return deg * (Math.PI / 180);
}

function haversineDistance(lat1, lon1, lat2, lon2) {
  const R = 6371;
  const dLat = deg2rad(lat2 - lat1);
  const dLon = deg2rad(lon2 - lon1);
  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

function calculateDeliveryFee(distance) {
  if (distance <= 10) return 2;
  if (distance <= 25) return 2.5;
  return 5;
}

async function updateDeliveryEstimation() {
  const address = document.getElementById('delivery').value.trim();
  const resultBox = document.getElementById('distanceResult');
  const estimatedBox = document.getElementById('estimatedDeliveryBox');

  if (!address) {
    resultBox.style.display = 'none';
    estimatedBox.textContent = "-";
    document.getElementById('deliveryPriceBox').textContent = `0 ÿØ.ŸÉ`;
    updateTotalPrice();
    return;
  }

  resultBox.textContent = "ÿ¨ÿßÿ±Ÿä ÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿ≥ÿßŸÅÿ©...";
  resultBox.style.display = 'block';

  const distance = await getDistanceFromAddress(address);
  if (distance === null) {
    resultBox.textContent = "ÿ™ÿπÿ∞ÿ± ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑŸÖŸàŸÇÿπ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿπŸÜŸàÿßŸÜ.";
    estimatedBox.textContent = "-";
    document.getElementById('deliveryPriceBox').textContent = `0 ÿØ.ŸÉ`;
    updateTotalPrice();
    return;
  }

  const fee = calculateDeliveryFee(distance);

  resultBox.textContent = `ÿßŸÑŸÖÿ≥ÿßŸÅÿ© ÿ•ŸÑŸâ ÿßŸÑÿπŸÜŸàÿßŸÜ: ${distance.toFixed(1)} ŸÉŸÖ ‚Äî ÿ±ÿ≥ŸàŸÖ ÿßŸÑÿ™ŸàÿµŸäŸÑ: ${fee.toFixed(3)} ÿØ.ŸÉ`;
  estimatedBox.textContent = `${fee.toFixed(3)} ÿØ.ŸÉ`;
  document.getElementById('deliveryPriceBox').textContent = `${fee.toFixed(3)} ÿØ.ŸÉ`;

  updateTotalPrice();
}

function updateTotalPrice() {
  const printPriceText = document.getElementById('printPriceBox').textContent.replace(" ÿØ.ŸÉ", "") || "0";
  const deliveryPriceText = document.getElementById('deliveryPriceBox').textContent.replace(" ÿØ.ŸÉ", "") || "0";

  const printPrice = parseFloat(printPriceText) || 0;
  const deliveryPrice = parseFloat(deliveryPriceText) || 0;

  const total = printPrice + deliveryPrice;
  document.getElementById('totalPriceBox').textContent = `${total.toFixed(3)} ÿØ.ŸÉ`;
}

function updatePrices() {
  const printType = document.querySelector('input[name="printType"]:checked')?.value;
  const copies = Number(document.getElementById('copies').value);
  const pages = Number(document.getElementById('pages').value);

  const printPrice = (printType && copies && pages) ? calculatePrintPrice(printType, copies, pages) : 0;
  document.getElementById('printPriceBox').textContent = `${printPrice.toFixed(3)} ÿØ.ŸÉ`;

  updateTotalPrice();
}

['copies', 'pages'].forEach(id => {
  document.getElementById(id).addEventListener('input', updatePrices);
});
document.querySelectorAll('input[name="printType"]').forEach(el => {
  el.addEventListener('change', updatePrices);
});

document.getElementById('delivery').addEventListener('blur', () => {
  updateDeliveryEstimation();
});

// Ÿàÿ∏ÿßÿ¶ŸÅ QR Code
function generateQRCode(url) {
  const qr = new QRious({
    element: document.getElementById('qrCanvas'),
    value: url,
    size: 200,
    level: 'H',
  });
}

function showQRCodeSection() {
  document.getElementById('qrSection').style.display = 'block';
}
